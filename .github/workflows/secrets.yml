name: Generate KMS (Key Management System) and store the ARN

on:
  push:
    branches:
      - secrets

jobs:
  generate_kms_key:
    runs-on: ubuntu-latest
    environment:
        name: develop
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLUSTER_ROLE_NAME: cv-eks-cluster-role
        CLUSTER_POLICY_NAME: cv-eks-cluster-policy
        NODEGROUP_ROLE_NAME: cv-eks-nodegroup-role
        NODEGROUP_POLICY_NAME: cv-eks-nodegroup-policy
        CODEPIPELINE_ROLE_NAME: cv-codepipeline-role
        CODEPIPELINE_POLICY_NAME: cv-codepipeline-policy
        CODEBUILD_ROLE_NAME: cv-codebuild-role
        CODEBUILD_POLICY_NAME: cv-codebuild-policy
        GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_TRUST_OWNERS: ${{ secrets.GPG_TRUST_OWNERS }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        WORKFLOW_NAME: cv-infrastructure.yml
        RECIPIENT_ID: ${{ secrets.RECIPIENT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.3

      - name: Setup the runner
        run: |
          ls ${GITHUB_WORKSPACE}/.github/scripts
          sh ${GITHUB_WORKSPACE}/.github/scripts/gpg-install.sh

      - name: Import the gpg components
        run: |
          echo ${GPG_TRUST_OWNERS} | base64 --decode > trust-file
          gpg --import-ownertrust < trust-file
          echo ${GPG_PUBLIC_KEY} | base64 --decode | gpg --import
          echo ${GPG_PRIVATE_KEY} | base64 --decode | gpg --import --batch
          echo "use-agent" >> ${HOME}/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ${HOME}/.gnupg/gpg.conf
          touch ${HOME}/.gnupg/gpg-agent.conf
          echo "allow-loopback-pinentry" >> ${HOME}/.gnupg/gpg-agent.conf


      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: List the directory to download the artifact
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          RUN_ID=`gh run list --workflow ${WORKFLOW_NAME} --json databaseId --jq .[0].databaseId`
          gh run download ${RUN_ID} --dir ${GITHUB_WORKSPACE}/artifacts -n kube_config.gpg

      - name: Decrypt kubeconfig
        run: |
          # export GPG_TTY=$(tty)
          mkdir ${HOME}/.kube/
          ls ${GITHUB_WORKSPACE}/artifacts/
          gpg --list-key
          gpg --list-secret-keys
          gpg --decrypt --output ${HOME}/.kube/config --recipient runner@mygithub.com ${GITHUB_WORKSPACE}/artifacts/kube_config.gpg
          cat ${HOME}/.kube/config

      - name: Generate KMS key and save the KVM key in GH secrets
        if: false
        run: |
          KVM_KEY_ID=$(aws kms create-key --query KeyMetadata.KeyId --output text)
          echo ${KVM_KEY_ID}
          KVM_KEY_ARN=$(aws kms describe-key --key-id $KVM_KEY_ID --query KeyMetadata.Arn --output text)
          echo ${KVM_KEY_ARN}

      - name: Shows the ARN just created
        if: false
        run: echo $KVM_KEY_ARN
